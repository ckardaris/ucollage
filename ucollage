#!/usr/bin/env bash
######################################################################
# Shell Options
######################################################################
shopt -s extglob

######################################################################
# Source Files
######################################################################
CONFIG_DEFAULT="{{UCOLLAGE_PREFIX_DIR}}/etc/ucollage/mappings"
CONFIG_SCRIPTS_FILE="$HOME/.config/ucollage/scripts"
CONFIG_VARIABLES_FILE="$HOME/.config/ucollage/variables"
[[ -f "$CONFIG_VARIABLES_FILE" ]] && source "$CONFIG_VARIABLES_FILE"
SOURCE_DIR="{{UCOLLAGE_PREFIX_DIR}}/usr/share/ucollage/src"
for srcfile in ${SOURCE_DIR}/*
do
    source "$srcfile"
done

######################################################################
# Help check
######################################################################
[[ "$1" =~ ^-h$|^--help$ ]] && help && exit

######################################################################
# Declarations - Initializations
######################################################################
declare -A map_cmd
declare -A colon_cmd
declare -A assoc

declare -A spacelist=(\
    [batch]="previous next first last"
    [rate]="0 1 2 3 4 5"
    [set]="${!optiontype[*]}"
    [!]="$(compgen -c | tr '\n' ' ')"
    [!%]="$(compgen -c | tr '\n' ' ')"
)

declare -A sticklist=(\
    [no]="showfileinfo execprompt reverse"
    [inv]="showfileinfo execprompt reverse"
)
for key in ${!enumoptvalue[*]}
do
    sticklist[$key=]="${enumoptvalue[$key]}"
    sticklist[$key:]="${enumoptvalue[$key]}"
done

######################################################################
# Signal handling
######################################################################
trap "exit_flag=1" SIGINT SIGTERM
trap "redraw; update_status" SIGWINCH

######################################################################
# Init actions
######################################################################
check_dependencies
set_options
config

######################################################################
# File and directory checking
######################################################################
[[ ! -d "$tmp_dir" ]] && mkdir -p "$tmp_dir"
[[ ! -d "$cache_dir" ]] && mkdir -p "$cache_dir"
[[ ! -d "$trash_dir" ]] && mkdir -p "$trash_dir"
[[ ! -d "${cache_dir}/hash/images" ]] && mkdir -p "${cache_dir}/hash/images"
[[ ! -d "${cache_dir}/hash/videos" ]] && mkdir -p "${cache_dir}/hash/videos"
[[ ! -d "${cache_dir}/hash/other" ]] && mkdir -p "${cache_dir}/hash/other"
[[ ! -d "${cache_dir}/thumbnails" ]] && mkdir -p "${cache_dir}/thumbnails"
[[ ! -f "${cache_dir}/cmd_history" ]] && touch "${cache_dir}/cmd_history"

######################################################################
# Set control flags
######################################################################
exit_flag=0
dirty_flag=0

start_daemon
while [[ "$exit_flag" -eq 0 ]]
do
    read_filenames "$@"
    stty -echo

    ######################################################################
    # Read first batch of images and then read up to maxload images
    ######################################################################
    ((first_batch = optcurrent[gridlines] * optcurrent[gridcolumns]))
    echo 0 > "${tmp_dir}/read_iter"
    echo 0 > "${tmp_dir}/read_lock"
    read_iter=0
    read_target="$first_batch" && read_images
    populate_arrays
    if [[ "${#images}" -eq 1 ]]
    then
        optcurrent[gridlines]=1
        optcurrent[gridcolumns]=1
        wide_vertical=1
        wide_horizontal=1
    fi
    read -r read_iter < "${tmp_dir}/read_iter"
    read_target="${optcurrent[maxload]}" && read_images & # read the max possible
    background_pid="$!"

    [[ "${#images}" -eq 0 ]] && printf "No images to show\n" && stty echo && \
        exit_clear=0 && break

    ######################################################################
    # Init state
    ######################################################################
    start=0
    current=0
    clear_screen
    redraw
    update_status
    loop
done
stop_daemon
