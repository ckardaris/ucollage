#!/usr/bin/env bash
shopt -s extglob
declare -A use_script
declare -A edit_script
declare -A filehash
CONFIG_FILE="$HOME/.config/ucollage/config.sh"
[[ -f "$CONFIG_FILE" ]] && source "$CONFIG_FILE"
unset use_script[w]
unset edit_script[w]

check_config_variable() {
    [[ -z "${!variable_name}" ]] && return
    eval "[[ \"${!variable_name}\" =~ $accept_regexp ]]" && return
    if [[ "$errors" -eq 0 ]]
    then
        echo "Error: configuration"
        echo "--------------------"
    fi
    echo "[$variable_name]"
    echo "Value: ${!variable_name}"
    echo "Valid: $valid_values"
    echo "--------------------"
    eval "${variable_name}=" #unset the variable
    errors=1
}

parse_config() {
    local errors=0

    variable_name="UCOLLAGE_LINES"
    accept_regexp="^([1-9][0-9]*|0+[1-9][0-9]*)$" # is natural
    valid_values="natural numbers"
    check_config_variable

    variable_name="UCOLLAGE_COLUMNS"
    accept_regexp="^([1-9][0-9]*|0+[1-9][0-9]*)$"
    valid_values="natural numbers"
    check_config_variable

    variable_name="UCOLLAGE_EXEC_PROMPT"
    accept_regexp="^(0|1)$"
    valid_values="0, 1"
    check_config_variable

    variable_name="UCOLLAGE_SHOW_NAMES"
    accept_regexp="^(0|1)$"
    valid_values="0, 1"
    check_config_variable

    variable_name="UCOLLAGE_EXPAND_DIRS"
    accept_regexp="^(0|1|ask)$"
    valid_values="0, 1, ask"
    check_config_variable

    variable_name="UCOLLAGE_SORT_BY"
    accept_regexp="^(name|time|size|extension)$"
    valid_values="name, time, size, extension"
    check_config_variable

    variable_name="UCOLLAGE_SORT_REVERSE"
    accept_regexp="^(0|1)$"
    valid_values="0, 1"
    check_config_variable

    variable_name="UCOLLAGE_SCALER"
    accept_regexp="^(crop|distort|fit_contain|contain|forced_cover|cover)$"
    valid_values="crop, distort, fit_contain, contain, forced_cover, cover"
    check_config_variable

    variable_name="UCOLLAGE_VIDEO_THUMBNAILS"
    accept_regexp="^(0|1)$"
    valid_values="0, 1"
    check_config_variable

    variable_name="UCOLLAGE_CACHE_THUMBNAILS"
    accept_regexp="^(0|1)$"
    valid_values="0, 1"
    check_config_variable

    variable_name="UCOLLAGE_THUMBNAIL_WIDTH"
    accept_regexp="^([1-9][0-9]*|0+[1-9][0-9]*)$" # is natural
    valid_values="natural numbers"
    check_config_variable

    variable_name="UCOLLAGE_MESSAGE_TIMEOUT"
    accept_regexp="^[0-9]*\.?[0-9]+$" # is time
    valid_values="real numbers"
    check_config_variable

    [[ "$errors" -eq 1 ]] && read -rsN1 -p "Using default variables..." && echo
}

set_defaults() {
    fit_vertical=${UCOLLAGE_LINES:-3}
    fit_horizontal=${UCOLLAGE_COLUMNS:-4}
    max_fit_vertical="${UCOLLAGE_MAX_LINES:-20}"
    max_fit_horizontal="${UCOLLAGE_MAX_COLUMNS:-20}"
    wide_vertical="$fit_vertical"
    wide_horizontal="$fit_horizontal"
    old_fit_vertical="$fit_vertical"
    old_fit_horizontal="$fit_horizontal"
    tmp_dir=${UCOLLAGE_TMP_DIR:-/tmp/ucollage}
    cache_dir=${UCOLLAGE_CACHE_DIR:-~/.local/share/ucollage}
    trash_dir=${UCOLLAGE_TRASH_DIR:-~/.local/share/Trash/ucollage}
    exec_prompt=${UCOLLAGE_EXEC_PROMPT:-0}
    show_names=${UCOLLAGE_SHOW_NAMES:-1}
    expand_dirs=${UCOLLAGE_EXPAND_DIRS:-ask}
    sort_by=${UCOLLAGE_SORT_BY:-name}
    sort_reverse=${UCOLLAGE_SORT_REVERSE:-0}
    scaler=${UCOLLAGE_SCALER:-contain}
    video_thumbnails=${UCOLLAGE_VIDEO_THUMBNAILS:-1}
    cache_thumbnails=${UCOLLAGE_CACHE_THUMBNAILS:-1}
    thumbnail_width=${UCOLLAGE_THUMBNAIL_WIDTH:-500}
    message_timeout=${UCOLLAGE_MESSAGE_TIMEOUT:-1}
    error=""
    warning=""
    success=""
    prefix=""
    exit_clear=1
}

help(){
    echo "Usage: ucollage [images] [directories]"
    echo
    echo "Controls:"
    echo "  Backspace            exit monocle mode"
    echo "  ;                    enter tag mode"
    echo "  n/right arrow        get next batch of images"
    echo "  N/shift+right arrow  get last batch of images"
    echo "  p/left arrow         get previous batch of images"
    echo "  P/shift+left arrow   get first batch of images"
    echo "  E                    toggle exec prompt"
    echo "  F                    toggle filenames on screen"
    echo "  o                    change sort type"
    echo "  O                    reverse sort"
    echo "  S                    change scaler"
    echo "  q                    exit"
    echo
    echo "Controls with vim-like prefix counters"
    echo "  (N)-        decrease both the numbers of columns and lines by N"
    echo "  (N)+/=      increase both the numbers of columns and lines by N"
    echo "  (N)b        execute one command for all images with index N"
    echo "              placeholders"
    echo "                  %S - all image filenames side by side"
    echo "  (N)c        rename image with index N"
    echo "  (N)d        move image with index N to Trash"
    echo "  (N)h        decrease number of columns by N"
    echo "  (N)j        decrease number of lines by N"
    echo "  (N)k        increase number of lines by N"
    echo "  (N)l        increase number of columns by N"
    echo "  (N)m        enter monocle mode; go to image with index N"
    echo "  (N)s        input exact number for lines and columns"
    echo "  (N)t        tag image with index N"
    echo "  (N)u        untag image with index N"
    echo "  (N)w        save edits of image with index N"
    echo "  (N)x        execute different commands for each image with index N"
    echo "              placeholders are available for command execution"
    echo "                  %s - image filename"
    echo
    echo "Monocle mode controls:"
    echo "  b           execute command for image"
    echo "              placeholders"
    echo "                  %S - original image filename"
    echo "  c           rename image"
    echo "  d           move image to Trash"
    echo "  r           rotate image 90 degrees clockwise"
    echo "  R           rotate image 90 degrees counterclockwise"
    echo "  t           tag image"
    echo "  u           untag image"
    echo "  w           save edits of image"
    echo "  x           execute command for image"
    echo "              placeholders"
    echo "                  %s - original image filename"
    echo "                  %r - rotated image filename"
    echo
    echo "Tag mode controls:"
    echo "  b           execute one command for all images"
    echo "              placeholders"
    echo "                  %S - original image filename"
    echo "  c           rename images"
    echo "  d           move images to Trash"
    echo "  m           go to first image"
    echo "  u           untag images"
    echo "  w           save edits of images"
    echo "  x           execute different command for every image"
    echo "              placeholders"
    echo "                  %s - original image filename"

}

check_dependencies() {
    local dependency
    declare -A dep
    dep[ueberzug]=ueberzug
    dep[file]=file
    dep[xxh128sum]=xxhash
    for dependency in ueberzug file xxh128sum
    do
        if ! command -v "$dependency" &>/dev/null
        then
            echo "Required dependency not installed: ${dep[$dependency]}" && exit_clear=0 && exit
        fi
    done
}

######################################################################
# Create filelist
# Uses:
#   sort_by
#   sort_reverse
#   expand_dirs
# Modifies:
#   filelist
#   image_names
#   images
#   read_iter
#   argc
# Arguments:
#   $@              command line arguments
######################################################################
read_filenames() {
    local ls_args="-d"
    [[ "$sort_reverse" -eq 1 ]] && ls_args+=" -r"
    case "$sort_by" in
        "time")
            ls_args+=" -t"
            ;;
        "size")
            ls_args+=" -S"
            ;;
        "extension")
            ls_args+=" -X"
            ;;
    esac
    if [[ "$#" -gt 0 ]]
    then
        mapfile -t filelist < <(ls $ls_args "$@")
    else
        mapfile -t filelist < <(ls $ls_args -- *)
    fi
    local item
    if [[ "$expand_dirs" -eq 1 ]]
    then
        for item in "${filelist[@]}"
        do
            [[ -d "$item" ]] && filelist+=("$item"/*)
        done
    elif [[ "$expand_dirs" == "ask" ]]
    then
        for item in "${filelist[@]}"
        do
            [[ -d "$item" ]] \
                && read -p "Expand $item? (n, Esc: no, N: no to all)" -rsN1 char \
                && echo
            [[ "$char" == "N" ]] && break
            [[ ! "$char" =~ ^(n|$'\e')$ ]] && filelist+=("$item"/*)
        done
    fi
    argc="${#filelist[@]}"
    image_names=()
    images=()
    rm -f "${tmp_dir}/image_names.txt*"
    rm -f "${tmp_dir}/images.txt*"
    read_iter=0
}

######################################################################
# Search for thumbnail of file in cache directory
# Uses:
#   file
#   cache_dir
# Modifies:
#   thumbnail_file
#   cache_name
# Return:
#   0 thumbnail file was found
#   1 thumbnail file was not found
######################################################################
find_thumbnail() {
    cache_name="${cache_dir}/thumbnails/${hash}.jpg"
    [[ -f "$cache_name" ]] && thumbnail_file="$cache_name" && return 0
    return 1
}

######################################################################
# Create thumbnail for file
# Uses:
#   file
#   tmp_dir
#   thumbnail_width
# Modifies:
#   thumbnail_file
######################################################################
create_thumbnail() {
    thumbnail_file="${tmp_dir}/${hash}.jpg"
    eval "$(ffprobe -i "$file" -show_entries format=duration -v quiet -of flat="s=_")"
    format_duration=${format_duration/.*/}
    (( time_point = format_duration / 2 ))
    ffmpeg -ss "$time_point" -i "$file" -loglevel quiet -frames:v 1 \
        -filter:v scale="$thumbnail_width":-1 -y "$thumbnail_file"
    montage -label "thumbnail" "$thumbnail_file" -geometry +0+0 -background Gold "$thumbnail_file"
}

is_image() {
    [[ -f "${cache_dir}/hash/images/${hash}" ]] && return 0
    if [[ $(file --mime-type -b "$file") =~ ^image/.*$ ]]
    then
        touch "${cache_dir}/hash/images/${hash}"
        return 0
    fi
    return 1
}

is_video() {
    [[ -f "${cache_dir}/hash/videos/${hash}" ]] && return 0
    if [[ $(file --mime-type -b "$file") =~ ^video/.*$ ]]
    then
        touch "${cache_dir}/hash/videos/${hash}"
        return 0
    fi
    return 1
}
######################################################################
# Parses filelist and filters supported filetypes
# Uses:
#   filelist
#   read_iter       number of files already parsed
#   read_target     maximum number of files to parse
#   argc            total number of files given as arguments
#   tmp_dir
#   thumbnail_file
#   video_thumbnails
#   cache_thumbnails
#   cache_name
#   start
# Modifies:
#   read_iter
# Outputs:
#   appends file names into the file ${tmp_dir}/image_names.txt
#   appends the image names corresponding to the above into the file ${tmp_dir}/images.txt
#   touches file ${tmp_dir}/done_reading if all files are parsed
#   prints a dot for every file with unsupported type if the user interface is not yet up
# Arguments:
#   $1              if "--remaining" parse the rest of the files
######################################################################
read_images() {
    readc=0
    while [[ "$1" == "--remaining" ]] || (( readc < read_target )) && (( read_iter < argc ))
    do
        file=${filelist[$read_iter]}
        read -d ' ' hash < <(head -c 100000 "$file" 2>/dev/null | xxh128sum)
        if is_image "$file"
        then
            echo "$file" >> "${tmp_dir}/image_names.txt"
            echo "$file" >> "${tmp_dir}/images.txt"
            (( readc += 1 ))
        elif is_video "$file" \
            && [[ "$video_thumbnails" -eq 1 ]] \
            && command -v ffmpeg &> /dev/null
        then
            ! find_thumbnail && create_thumbnail
            echo "$file" >> "${tmp_dir}/image_names.txt"
            echo "$thumbnail_file" >> "${tmp_dir}/images.txt"
            if [[ "$cache_thumbnails" -eq 1 ]] && [[ ! "$thumbnail_file" == "$cache_name" ]]
            then
                cp -f "$thumbnail_file" "$cache_name"
            fi
            (( readc += 1 ))
        else
            touch "${cache_dir}/hash/other/${hash}"
            [[ ! "$1" == "--remaining" ]] && printf "." # only print if ui is not started
        fi
        (( read_iter += 1 ))
    done
    printf "\n"
    [[ "$1" == "--remaining" ]] \
        && true > "${tmp_dir}/done_reading" \
        || rm -f "${tmp_dir}/done_reading"
}

######################################################################
# 2J                Clear entire screen
# ?25l              Hide cursor
# H                 Move cursor to upper left corner
######################################################################
clear_screen() {
    printf "\e[2J\e[?25l\e[H"
}

######################################################################
# ?25l              Hide cursor
# H                 Move cursor to upper left corner
# 2B                Move cursor down 2 lines
# 2K                Clear entire line
# 1J                Clear screen from cursor up
######################################################################
clear_status() {
    if [[ "$1" == "--temp-message" ]] #clear 2nd and 3rd line
    then
        printf "\e[?25l\e[H\e[2B\e[2K\e[1A\e[2K\e[2;1H"
        return
    fi
    # clear only first three lines of screen
    printf "\e[?25l\e[H\e[2B\e[2K\e[1J\e[H"
    status=""
}

######################################################################
# ?25l              Hide cursor
# H                 Move cursor to upper left corner
# 3B                Move cursor down 3 lines
# 2K                Clear entire line
# 0J                Clear screen from cursor down
######################################################################
clear_names() {
    # clear from 4th line and down
    printf "\e[?25l\e[H\e[3B\e[2K\e[0J\e[H"
}

show_cursor() {
    printf "\e[?25h"
}

######################################################################
# Starts the ueberzug daemon
# Uses:
#   tmp_dir
# Modifies:
#   fifo
# Outputs:
#   creates the fifo file
######################################################################
start_daemon() {
    fifo="${tmp_dir}/fifo"
    mkfifo "$fifo"
    ueberzug layer --parse bash --silent < "$fifo" &
    exec {ueberzug}> "$fifo"
}

stop_daemon() {
    exec {ueberzug}>&-
    [[ "$exit_clear" == 1 ]] && clear_screen
    rm -rf "$tmp_dir"
    show_cursor
    stty echo
    exit
}

######################################################################
# Calculates the parameters for the current view
# Uses:
#   fit_vertical
#   fit_horizontal
#   start
# Modifies:
#   photo_columns
#   photo_lines
#   batch
#   show
######################################################################
calculate_dimensions() {
    read -r lines columns < <(stty size)
    (( photo_columns = columns / fit_horizontal ))
    (( photo_lines = (lines - 3) / fit_vertical ))
    (( batch = fit_horizontal * fit_vertical ))
    (( show = total - start ))
    [[ "$show" -gt "$batch" ]] && show="$batch"
}

######################################################################
# Pads strings with filenames to fit into the given column width
# Uses:
#   current_name
#   photo_columns
# Modifies:
#   current_name
######################################################################
pad_sides() {
    length="${#current_name}"
    (( pads = photo_columns - length ))
    (( leftpad = pads / 2 ))
    (( rightpad = pads - leftpad ))
    local p
    for (( p = 0; p < leftpad; p++))
    do
        current_name=" $current_name"
    done
    for (( p = 0; p < rightpad; p++))
    do
        current_name+=" "
    done
}

######################################################################
# Draws the current batch of images on the screen
# Uses:
#   show
#   show_names
#   fit_vertical
#   fit_horizontal
#   start
#   images
#   scaler
#   fifo
######################################################################
show_batch() {
    cnt=0
    [[ "$show" -lt 1 ]] && return
    if [[ "$show_names" -eq 1 ]] && [[ "$show" -gt 1 ]]
    then
        # Substracting 3 lines is a hack. The names can be printed in
        # two lines, but ueberzug is not exact in its drawing on the
        # terminal lines for different window sizes.
        # So I give it some more room for error.
        (( draw_lines = photo_lines - 3 ))
    else
        draw_lines="$photo_lines"
    fi
    local i
    (( limit_i = old_fit_vertical > fit_vertical ? old_fit_vertical : fit_vertical ))
    (( limit_j = old_fit_horizontal > fit_horizontal ? old_fit_horizontal : fit_horizontal ))
    for (( i = 0; i < limit_i; i++ ))
    do
        for (( j = 0; j < limit_j; j++))
        do
            if (( i < fit_vertical && j < fit_horizontal && count < show ))
            then
                (( index = start + i * fit_horizontal + j))
                (( posx = j * photo_columns))
                (( posy = 3 + i * photo_lines))
                assoc=( [action]=add \
                        [identifier]="${fifo}${i}${j}" \
                        [path]="${images[$index]}" \
                        [width]="$photo_columns" \
                        [height]="$draw_lines" \
                        [x]="$posx" \
                        [y]="$posy" \
                        [scaler]="$scaler" )
            else
                assoc=( [action]=remove \
                        [identifier]="${fifo}${i}${j}" )
            fi
            declare -p assoc > "$fifo"
        done
    done
}

######################################################################
# Modifies the parameters needed to show another batch
# Uses:
#   start
#   show
#   rotated_file
# Modifies:
#   new_start
#   warning
# Outputs:
#   deletes rotated file if new batch is different than the current
# Return:
#   0               new batch is different than the current
#   1               new batch is the same as the current
######################################################################
compute_batch() {
    case $1 in
        next)
            # There exists an edge case here when $show is less that
            # $batch, but we are not in the last batch of images
            # This can happen when we are loading the images in the background
            # and the user has changes the batch size with the 's' option
            # right after starting up.
            if (( start + show < total ))
            then
                (( new_start = start + show ))
            else
                warning="End of files"
            fi
            ;;
        last)
            (( new_start = total - ((total - 1) % batch + 1) ))
            [[ "$new_start" -le "$start" ]] && warning="End of files"
            ;;
        prev)
            [[ "$start" -eq 0 ]] && warning="Start of files"
            (( new_start = start - batch))
            # The below is useful in case of resizing
            # If I am in the second of batches of 10 and the
            # new window fits 20 then I don't want negative numbers
            [[ "$new_start" -lt 0 ]] && new_start=0
            ;;
        first)
            [[ "$start" -eq 0 ]] && warning="Start of files"
            new_start=0
            ;;
    esac
    [[ -z "$warning" ]] && rm -f "$rotated_file" && return 0 || return 1
}

######################################################################
# Calculates the next suggestion from the autocomplete array
# Uses:
#   autocomplete
#   suggestion_count
# Modifies:
#   suggestion_index
#   suggestion
# Arguments:
#   $1              prev or next, depending on the direction we are cycling
######################################################################
set_suggestion() {
    # if suggestion count is 2 then that means that there is only one suggestion
    # that along with the input makes the count 2. In that case the suggestion
    # should be selected.
    [[ "$suggestion_count" -eq 2 ]] && suggestion="${autocomplete[1]}" && clear_suggestions && return
    if [[ "$1" == "next" ]]
    then
        (( suggestion_index = (suggestion_index + 1) % suggestion_count ))
    elif [[ "$1" == "prev" ]]
    then
        (( suggestion_index = (suggestion_index - 1) % suggestion_count ))
    fi
    suggestion="${autocomplete[$suggestion_index]}"
}

######################################################################
# Saves the suggestion as input and clears everything related to autocomplete
# Uses:
#   suggestion
# Modifies:
#   left
#   suggestion
#   autocomplete
######################################################################
clear_suggestions() {
    [[ -z "$suggestion" ]] && return
    input_left="$suggestion"
    suggestion=""
    suggestion_count=0
    unset autocomplete
}

######################################################################
# Escapes special characters in filenames in order to not have a problem
# with command execution. Should be used like var=$(escape_name "$var")
# Arguments:
#   $1              The name we want to escape chars for
# Outputs:
#   $2              Prints the updated name
######################################################################
escape_name() {
    local name="$1"
    name="${name// /\\ }"
    name="${name//\(/\\\(}"
    name="${name//\)/\\\)}"
    name="${name//\{/\\\{}"
    name="${name//\}/\\\}}"
    printf "%s" "$name"
}

######################################################################
# Creates the automplete array based on the autocomplete type we want
# Uses:
#   left
# Modifies:
#   autocomplete
# Arguments:
#   $1              autocomplete type: command, file, etc.
# Return:
#   0               if autocomplete array was created
#   1               if array was not created for any reason
######################################################################
create_suggestions() {
    local files=0
    IFS=" " read -r -a split_left <<< "$input_left"
    [[ "${input_left: -1}" == " " ]] && split_left+=("") #we do that so that a space confirms a suggestion
    if [[ "${#split_left[@]}" -eq 0 ]]
    then
        local word=
    else
        local word="${split_left[-1]}"
    fi
    if [[ "$input_autocomplete" == "command" ]]
    then
        if [[ "${#split_left[@]}" -gt 1 ]]
        then
            mapfile -t autocomplete < <(compgen -f "$word" | sort)
            files=1
        else
            mapfile -t autocomplete < <(compgen -c "$word" | sort)
        fi
    elif [[ "$input_autocomplete" == "file" ]]
    then
        mapfile -t autocomplete < <(compgen -f "$word" | sort)
        files=1
    elif [[ "$input_autocomplete" == "scaler" ]]
    then 
        wordlist="crop distort fit_contain contain forced_cover cover"
        mapfile -t autocomplete < <(IFS=" " compgen -W "$wordlist" "$word")
    elif [[ "$input_autocomplete" == "sort" ]]
    then 
        wordlist="name time size extension"
        mapfile -t autocomplete < <(IFS=" " compgen -W "$wordlist" "$word")
    fi

    autocomplete=("$input_left" "${autocomplete[@]}")
    [[ "${#split_left[@]}" -gt 0 ]] && unset "split_left[-1]"
    if [[ "$files" -eq 1 ]] #only escape filenames
    then
        local i=1
        while [[ "$i" -lt ${#autocomplete[@]} ]]
        do
            autocomplete[$i]=$(escape_name "${autocomplete[$i]}")
            [[ "${#split_left[@]}" -gt 0 ]] && autocomplete[$i]="${split_left[*]} ${autocomplete[$i]}"
            (( i += 1 ))
        done
    fi
    suggestion_index=0
    suggestion_count=${#autocomplete[@]}
    return 0
}

######################################################################
# Gets input from the user
# Modifies:
#   input
# Arguments:
#   $1              text to show as prompt
#   $2              text to have already in the input line
#   $3              suggestion type (command, file, etc.)
# Outputs:
#   None
# Return:
#   0               if input is meaningful
#   1               if input is not meaningful
######################################################################
get_input() {
    show_cursor
    printf "%s \e7" "$input_prompt"
    while true
    do
        printf "\e8\e[K"
        move=""
        [[ -n "$input_right" ]] && move="\e[${#input_right}D"
        if [[ -n "$suggestion" ]]
        then
            printf "%s%s$move" "$suggestion" "$input_right"
        else
            printf "%s%s$move" "$input_left" "$input_right"
        fi
        read -rsN1 char
        read -rsN1 -t 0.0001 k1
        read -rsN1 -t 0.0001 k2
        read -rsN1 -t 0.0001 k3
        read -rsN1 -t 0.0001 k4
        read -rsN1 -t 0.0001 k5
        read -rsN1 -t 0.0001 k6
        key="${char}${k1}${k2}${k3}${k4}${k5}${k6}"
        case "$key" in
            $'\e[D') #left arrow press
                clear_suggestions
                if [[ -n "$input_left" ]]
                then
                    input_right="${input_left: -1}$input_right"
                    input_left="${input_left:0:-1}"
                fi
                ;;
            $'\e[C') #right arrow press
                clear_suggestions
                if [[ -n "$input_right" ]]
                then
                    input_left="$input_left${input_right:0:1}"
                    input_right="${input_right:1}"
                fi
                ;;
            $'\e[H'|$'\e[1~') #Home
                clear_suggestions
                input_right="${input_left}${input_right}"
                input_left=""
                ;;
            $'\e[F'|$'\e[4~') #End
                clear_suggestions
                input_left+="${input_right}"
                input_right=""
                ;;
            $'\e[3~'|$'\e[P')
                clear_suggestions
                [[ -n "$input_right" ]] && input_right="${input_right:1}"
                ;;
            $'\e')
                clear_suggestions
                input=
                break
                ;;
            $'\b'|$'\x7F')
                clear_suggestions
                [[ -n "$input_left" ]] && input_left="${input_left:0:-1}"
                ;;
            $'\n')
                clear_suggestions
                input="${input_left}${input_right}"
                break
                ;;
            [[:print:]])
                clear_suggestions
                input_left+="$key"
                ;;
            $'\t')
                [[ -z "$input_autocomplete" ]] && continue
                [[ ${#autocomplete[@]} -gt 0 ]] && set_suggestion next && continue
                ! create_suggestions && continue || set_suggestion next
                ;;
            $'\e[Z')
                [[ -z "$input_autocomplete" ]] && continue
                [[ ${#autocomplete[@]} -gt 0 ]] && set_suggestion prev && continue
                ! create_suggestions && continue || set_suggestion prev
                ;;
            $'\e[B')
                clear_suggestions
                ;;
            *)
                ;;
        esac
    done
    input_left=
    input_right=
    input_autocomplete=
    [[ -z "$input" ]] && return 1 || return 0
}

is_natural() {
    [[ "$1" =~ ^([1-9][0-9]*|0+[1-9][0-9]*)$ ]]
}

set_error() {
    error="Invalid value for $1: $2"
}

######################################################################
# Ask the user to set the grid size
# Uses:
#   fit_vertical
#   fit_horizontal
# Modifies:
#   new_fit_vertical
#   new_fit_horizontal
######################################################################
give_dimensions() {
    old_fit_vertical="$fit_vertical"
    old_fit_horizontal="$fit_horizontal"
    new_fit_vertical="$fit_vertical"
    new_fit_horizontal="$fit_horizontal"
    input_prompt="Give number of lines and columns:"
    ! get_input && return
    local fit
    IFS=" " read -r -a fit <<< "$input"
    ! is_natural "${fit[0]}" && error="NaN: ${fit[0]}" && return
    ! is_natural "${fit[1]}" && error="Nan: ${fit[1]}" && return
    [[ ! "${fit[0]}" -eq "$fit_vertical" ]] && (( new_fit_vertical = fit[0] ))
    [[ ! "${fit[1]}" -eq "$fit_horizontal" ]] && (( new_fit_horizontal = fit[1] ))
}

######################################################################
# Draws filenames under the images on the screen
# Uses:
#   line_names
######################################################################
print_names() {
    read -r lines columns < <(stty size)
    separator=""
    local s
    for (( s = 0; s < columns; s++ ))
    do
        separator+="─"
    done
    local len=${#line_names[@]}
    local i
    for (( i = 0; i < len; i++))
    do
        (( current_line = 2 + (i + 1) * photo_lines ))
        printf "\e[%s;1f" "$current_line"
        printf "\e[2K%s" "${line_names[$i]}"
        (( current_line += 1 ))
        printf "\e[%s;1f" "$current_line"
        printf "%s" "$separator"
    done
}

######################################################################
# Update the filenames to account for batch changes or file renaming
# Uses:
#   show_names
#   fit_vertical
#   fit_horizontal
#   start
#   show
#   image_names
#   photo_columns
# Modifies:
#   line_names
# Return:
#   0               if names where modified
#   1               if the function is unnecessary in a context
######################################################################
modify_names() {
    cnt=0
    [[ "$show_names" -eq 0 ]] || in_monocle && return 1
    line_names=()
    local i
    for (( i = 0; i < fit_vertical; i++ ))
    do
        names=""
        local j
        for (( j = 0; j < fit_horizontal; j++, cnt++ ))
        do
            (( index = start + i * fit_horizontal + j))
            if [[ "$cnt" -lt "$show" ]]
            then
                (( current_number = i * fit_horizontal + j + 1 ))
                current_name="${current_number}: $(basename "${image_names[$index]}")"
                [[ -n ${edits[$index]} ]] && current_name="~ ${current_name}"
                [[ -n ${tags[$index]} ]] && current_name="* ${current_name}"
                (( max_length = photo_columns - 2 ))
                current_name=${current_name:0:$max_length}
                pad_sides
                names+="$current_name"
            fi
        done
        [[ -n "$names" ]] && line_names+=("$names")
    done
    return 0
}

update_names() {
    clear_names
    modify_names && print_names
}

redraw() {
    calculate_dimensions
    show_batch
    update_names
}

######################################################################
# Checks whether a redraw is necessary
# Uses:
#   new_fit_vertical
#   new_fit_horizontal
#   new_start
#   fit_vertical
#   fit_horizontal
#   start
#   batch
# Modifies:
#   wide_vertical
#   wide_horizontal
#   wide_start
#   fit_vertical
#   fit_horizontal
#   start
# Outputs:
#   deletes the rotated image file
######################################################################
maybe_redraw() {
    read -r lines columns < <(stty size)
    if (( new_fit_vertical != fit_vertical )) \
        || (( new_fit_horizontal != fit_horizontal )) \
        || (( new_start != start ))
    then
        (( new_fit_vertical > max_fit_vertical )) && \
            error="Maximum number of lines set to $max_fit_vertical" && return
        (( new_fit_vertical < 1 )) && return
        (( new_fit_horizontal > max_fit_horizontal )) && \
            error="Maximum number of columns set to $max_fit_vertical" && return
        (( new_fit_horizontal < 1 )) && return
        if [[ "$new_fit_vertical" -eq 1 && "$new_fit_horizontal" -eq 1 && "$batch" -gt 1 ]]
        then
            wide_vertical="$fit_vertical"
            wide_horizontal="$fit_horizontal"
            wide_start="$start"
        fi
        (( wide_batch = wide_vertical * wide_horizontal ))
        if [[ "$wide_batch" -gt 0 ]]
        then
            while (( new_start >= wide_start + wide_batch ))
            do
                (( wide_start = wide_start + wide_batch ))
            done
            while (( new_start < wide_start ))
            do
                (( wide_start = wide_start - wide_batch ))
            done
        fi
        old_fit_vertical="$fit_vertical"
        old_fit_horizontal="$fit_horizontal"
        fit_vertical="$new_fit_vertical"
        fit_horizontal="$new_fit_horizontal"
        start="$new_start"
        rm -f "$rotated_file"
        redraw
    fi
}

######################################################################
# Set information relating to the current view
# Uses:
#   fit_vertical
#   fit_horizontal
#   start
#   image_names
#   prefix
# Modifies:
#   info
######################################################################
set_info() {
    case "$mode" in
        "tag")
            info=" T-MODE "
            ;;
        "normal")
            info=" NORMAL "
            ;;
        *)
            ;;
    esac
    ((begin = start + 1))
    info+="│ $fit_vertical x $fit_horizontal"
    if in_monocle
    then
        local photo_name
        photo_name=$(basename "${image_names[$start]}")
        [[ -n ${edits[$start]} ]] && photo_name="~ ${photo_name}"
        [[ -n ${tags[$start]} ]] && photo_name="* ${photo_name}"
        info+=" │ $begin/$total │ ${photo_name}"
    else
        ((finish = begin + show - 1))
        info+=" │ [$begin-$finish]/$total"
    fi
    local tlen=${#tags[@]}
    local elen=${#edits[@]}
    [[ "$tlen" -gt 0 ]] && info+=" │ * ${tlen}"
    [[ "$elen" -gt 0 ]] && info+=" │ ~ ${elen}"
    local padding
    local length
    length=${#info}
    read -r lines columns < <(stty size)
    (( padding = columns - length))
    for ((i = 0; i < padding; i++))
    do
        info+=" "
    done
    case "$mode" in
        "tag")
            info="\e[44m\e[30m$info"
            ;;
        *)
            ;;
    esac
    info+="\e[m"
}

######################################################################
# Checks whether we are in monocle mode
# Uses:
#   batch
# Modifies:
#   warning
# Arguments:
#   $1              string to set as the beginning of warning
# Return:
#   0               if we are in in monocle mode
#   1               if we are not in monocle mode
######################################################################
in_monocle() {
    [[ "$batch" -eq 1 ]] && return 0 || return 1
}

######################################################################
# Evaluate a command
# Uses:
#   exec_prompt
# Modifies:
#   error
# Arguments:
#   $1              message to show if confirm prompt is enabled
#   $2              command to execute
#   $3              message to show on successful execution
# Return:
#   0               if command was executed successfully
#   1               if command failed
######################################################################
eval_cmd() {
    if [[ "$exec_prompt" -eq 1 ]]
    then
        clear_status
        printf "%s? (Press y/Y/Enter to confirm)" "$cmd_prompt"
        read -rsN1 ans
        [[ ! "$ans" =~ ^(y|Y|$'\n')$ ]] && return 1
    fi
    error=$(eval "$cmd" 2>&1 >/dev/null)
    [[ -z "$error" ]] && success="$cmd_success" && return 0 || return 1
}

######################################################################
# Checks if all indices given as input are valid
# Uses:
#   image_index
#   total
#   show
# Return:
#   0               if all indices are valid
#   1               if any index invalid
######################################################################
valid_indices() {
    local i
    for (( i = 0; i < index_count; i++ ))
    do
        if (( image_index[i] <= 0 || image_index[i] > show ))
        then
            error="Index out of bounds: ${image_index[$i]}" && return 1
        elif ! is_natural ${image_index[i]}
        then
            error="NaN: ${image_index[$i]}" && return 1

        fi
    done
    return 0
}

######################################################################
# Selects all indices given the scope
# Uses:
#   show
#   total
# Modifies:
#   image_index
######################################################################
all_indices() {
    image_index=()
    local i
    if [[ "$1" == "--global" ]]
    then
        for ((i = 1; i <= total; i++ ))
        do
            image_index+=("$i")
        done
    else
        for ((i = 1; i <= show; i++ ))
        do
            image_index+=("$i")
        done
    fi
}

######################################################################
# Set the image_index to operate on (array of indices)
# Uses:
#   prefix
#   batch
#   start
#   tags
# Modifies:
#   image_index
# Returns:
#   0               if indices are ok to be used
#   1               if an error occured (escaped input,zero count, invalid indices)
######################################################################
get_image_index() {
    unset image_index
    local i
    local star=0
    if [[ "$mode" == "tag" ]]
    then
        for (( i = 1; i <= total; i++ ))
        do
            ((tag_index = i - 1)) # indices start from 0 in tag array
            [[ -n ${tags[$tag_index]} ]] && image_index+=("$i")
        done
    elif [[ "$prefix" =~ ^\*\* ]]
    then
        all_indices --global
        star=2
    elif [[ "$prefix" =~ ^\* ]]
    then
        all_indices --local
        star=1
    elif [[ -n "$prefix" ]]
    then
        IFS=" " read -r -a image_index <<< "$prefix"
        index_count=${#image_index[@]}
        ! valid_indices && return 1
    # no prefix given
    elif [[ "$batch" -eq 1 ]] # no-prefix, just the key pressed
    then
        image_index=1
    else
        ! get_input && return 1
        if [[ "$input" =~ ^\*\* ]] 
        then
            all_indices --global
            star=2
        elif [[ "$input" =~ ^\* ]] 
        then
            all_indices --local 
            star=1
        else
            IFS=" " read -r -a image_index <<< "$input"
            index_count=${#image_index[@]}
            ! valid_indices && return 1
        fi
    fi

    index_count=${#image_index[@]}
    [[ "$index_count" -eq 0 ]] && return 1

    for (( i = 0; i < index_count; i++ ))
    do
        (( image_index[i] -= 1 )) #adjust index for arrays
    done
    if [[ "$star" -lt 2 ]] ## if ** is used then the indices are correct
    then
        for (( i = 0; i < index_count; i++ ))
        do
            (( image_index[i] += start))
        done
    fi
    return 0
}

######################################################################
# Checks whether the provided index is local to the current view
# Uses:
#   start
#   show
# Arguments:
#   $1              the index to check
# Return:
#   0               if the index is local
#   1               if the index is not local
######################################################################
is_index_local() {
    (( end = start + show ))
    [[ "$1" -ge "$start" ]] && [[ "$1" -lt "$end" ]] && return 0 || return 1
}


######################################################################
# Checks whether the provided index corresponds to an image and not
# another filetype, thus image_names and images need to be updated
# together
# Uses:
#   image_names
#   images
# Arguments:
#   $1          the index to check
# Return:
#   0           if the index is an image
#   1           if the index is not an image
######################################################################
parallel_update() {
    [[ "${image_names[$1]}" == "${images[$1]}" ]] && return 0 || return 1
}

######################################################################
# Update the status line
# Uses:
#   warning
#   error
#   success
# Modifies:
#   status
# Outputs:
#   prints the status on stdout
######################################################################
update_status() {
    read -r lines columns < <(stty size)
    local new_status=""
    set_info
    new_status="\e[107;30m${info}\e[m"
    if [[ ! "$new_status" == "$status" ]] || [[ "$1" == "--force" ]]
    then
        clear_status
        status="$new_status"
        printf "$status"
    fi
    [[ ${#prefix} -gt 30 ]] && 
        prefix_status=${prefix: -30} || 
        prefix_status="$prefix"
    [[ ! "$prefix" =~ ^(;)$ ]] && \
        printf "\e[H\e[B\e[2K\e[%sC%s" $((columns - 20)) "$prefix_status"
    new_status=""
    [[ "$exec_prompt" -eq 0 ]] && [[ ! "$1" == "--force" ]] && return
    if [[ -n "$success" ]]
    then
        new_status="\e[32m${success}\e[m"
        success=""
    elif [[ -n "$error" ]]
    then
        ((space = 2 * columns))
        [[ "${#error}" -gt "$space" ]] && error="${error:0:$space}"
        new_status="\e[31m${error}\e[m"
        error=""
    elif [[ -n "$warning" ]]
    then
        new_status="\e[33m${warning}\e[m"
        warning=""
    fi
    if [[ -n "$new_status" ]]
    then
        clear_status --temp-message
        printf "$new_status"
        read -t "$message_timeout" -rsN1
        clear_status --temp-message
    fi
}

run_use_script() {
    local i
    local success
    show_cmd=$(basename -a ${script} | tr '\n' ' ' | head -c-1)
    input_prompt="Run script \"${show_cmd}\" on #"
    ! get_image_index && return 1
    for (( sc_i = 0; sc_i < index_count; sc_i++))
    do
        ind=${image_index[$sc_i]}
        printf "\e[H"
        cmd="${script} \"${image_names[$ind]}\""
        cmd_prompt="$ ${show_cmd} \"$(basename -a ${image_names[$ind]} | tr '\n' ' ' | head -c-1)\""
        cmd_success="Successful execution"
        eval_cmd && update_status && success=1
    done
}

run_edit_script() {
    old_exec_prompt="$exec_prompt"
    exec_prompt=0
    local sc_i
    local edited=0
    show_cmd=$(basename -a ${script} | tr '\n' ' ' | head -c-1)
    ! get_image_index && exec_prompt="$old_exec_prompt" && return 1
    for (( sc_i = 0; sc_i < index_count; sc_i++))
    do
        ind=${image_index[$sc_i]}
        printf "\e[H"
        full_cmd="$cmd"
        file="${image_names[$ind]}"
        case $file in
            (*.*) extension=${file##*.};;
            (*)   extension="";;
        esac
        read -d ' ' hash < <(head -c 100000 "$file" 2>/dev/null | xxh128sum)
        if ! is_image
        then
            error="Editing only supported for images"
            update_status
            continue
        fi
        filehash[$hash]=${image_names[$ind]}
        cmd="${script} \"${images[$ind]}\" \"${tmp_dir}/${hash}.${extension}\""
        cmd_prompt="$ ${show_cmd} \"$(basename -a ${image_names[$ind]} | tr '\n' ' ' | head -c-1)\" {tmpfile}"
        cmd_success=
        if eval_cmd
        then
            edited=1
            [[ -n ${edits[$ind]} ]] && (( edits[ind]+=1 )) || edits[ind]=1 
        fi
        if [[ "$edited" -eq 1 ]]
        then
            images[$ind]="${tmp_dir}/${hash}.${extension}"
            redraw
        fi
    done
    exec_prompt="$old_exec_prompt"
}

save_edits() {
    local se_i
    local saved=1
    input_prompt="Save edits for #"
    ! get_image_index && return 1
    for (( se_i = 0; se_i < index_count; se_i++))
    do
        ind=${image_index[$se_i]}
        tmpfile=${images[$ind]}
        case $tmpfile in
            (*.*) extension=${tmpfile##*.};;
            (*)   extension="";;
        esac
        hash=${tmpfile%.${extension}}
        hash=${hash#${tmp_dir}/}
        original=${filehash[$hash]}
        if [[ -z $original ]]
        then
            error="File does not have pending edits"
            update_status
            continue
        fi
        printf "\e[H"
        cmd="cp -f \"${tmpfile}\" \"${original}\""
        cmd_prompt="Save edits for ${original}"
        cmd_success="Saved succesfully"
        eval_cmd && saved=1
        if [[ "$saved" -eq 1 ]]
        then
            images[$ind]="${original}"
            rm ${tmpfile}
            unset filehash[$hash]
        fi
    done
}

execute() {
    local ex_i
    local action="$1"
    if [[ "$action" == "split" ]] # each image on its own
    then
        input_prompt="Execute individually #"
        ! get_image_index && return 1
        for (( ex_i = 0; ex_i < index_count; ex_i++))
        do
            ind=${image_index[$ex_i]}
            printf "\e[1J\e[H\n"
            printf "%%s: %s\n" "${image_names[$ind]}"
            [[ -f "$rotated_file" ]] && printf "%%r: %s" "$rotated_file"
            printf "\e[H"
            input_prompt="Command:"
            input_autocomplete="command"
            ! get_input && continue
            cmd=${input//%s/\"${image_names[$ind]}\"}
            cmd=${cmd//%r/\"${rotated_file}\"}
            cmd_prompt="$ ${cmd}"
            cmd_success="Successful execution"
            eval_cmd
            update_status --force
        done
    else # bundle images
        input_prompt="Execute bundled #"
        ! get_image_index && return 1
        local args=""
        for (( i = 0; i < index_count; i++))
        do
            ind=${image_index[$i]}
            args+="\"${image_names[$ind]}\" "
        done
        printf "\e[1J\e[H\n"
        printf "%%S: %s\n" "$args"
        printf "\e[H"
        input_prompt="Command:"
        input_autocomplete="command"
        ! get_input && return
        cmd=${input//%S/${args[@]}}
        cmd_prompt="$ ${cmd}"
        cmd_success="Successful execution"
        eval_cmd
    fi
}

rename() {
    local update=0
    local mv_i
    input_prompt="Rename #"
    ! get_image_index && return 1
    local renamed=0
    for (( mv_i = 0; mv_i < index_count; mv_i++))
    do
        ind=${image_index[$mv_i]}
        printf "\e[1J\e[HOld name: %s\n" "${image_names[$ind]}"
        input_prompt="New name:"
        input_left="${image_names[$ind]}"
        ! get_input && continue
        if [[ "${image_names[$ind]}" == "$input" ]]
        then
            error="New name has to be different"
            update_status --force
            continue
        elif [[ -f "$input" ]]
        then
            error="Filename exists"
            update_status --force
            continue
        fi
        cmd="mv \"${image_names[$ind]}\" \"$input\""
        cmd_prompt="Rename to: ${input}"
        cmd_success="Successfully renamed"
        if eval_cmd
        then
            update_status
            parallel_update "$ind" && images[$ind]="$input"
            image_names[$ind]="$input"
            is_index_local "$ind" && update=1
            (( renamed += 1 ))
        fi
    done
    if [[ "$renamed" -eq "$index_count" ]]
    then
        [[ "$index_count" -gt 1 ]] && success="Successfully renamed ${renamed} out of ${index_count} files"
    elif [[ "$renamed" -gt 0 ]]
    then
        [[ "$index_count" -gt 1 ]] && warning="Successfully renamed ${renamed} out of ${index_count} files"
    fi
    [[ "$update" -eq 1 ]] && return 0 || return 1
}

goto_image() {
    input_prompt="Go to #"
    ! get_image_index && return
    new_start="$image_index"
    old_fit_vertical="$fit_vertical"
    old_fit_horizontal="$fit_horizontal"
    new_fit_vertical=1
    new_fit_horizontal=1
    maybe_redraw
}

delete_image() {
    local update=0
    local del_i
    input_prompt="Delete #"
    ! get_image_index && return 1
    local deleted=0
    for (( del_i = 0; del_i < index_count; del_i++))
    do
        (( updated = del_i - deleted )) # adjust index because we trim the arrays after deleting
        ind=${image_index[$updated]}
        cmd="mv \"${image_names[$ind]}\" \"$trash_dir\""
        cmd_prompt="Delete: ${image_names[$ind]}"
        cmd_success="Successfully moved to trash folder"
        if eval_cmd
        then
            update_status --force
            unset image_names["${image_index[$updated]}"]
            unset images["${image_index[$updated]}"]
            image_names=("${image_names[@]}")
            images=("${images[@]}")
            total=${#images[@]}
            is_index_local "$ind" && update=1
            (( deleted += 1 ))
        fi
    done
    if [[ "$deleted" -eq "$index_count" ]]
    then
        [[ "$index_count" -gt 1 ]] && success="Successfully moved to trash folder"
    elif [[ "$deleted" -gt 0 ]]
    then
        [[ "$index_count" -gt 1 ]] && warning="Successfully moved to trash folder ${deleted} out of ${index_count} files"
    fi
    [[ "$update" -eq 1 ]] && return 0 || return 1
}

tag_image() {
    local update=0
    local i
    case $1 in
        tag)
            input_prompt="Tag #"
            ! get_image_index && return 1
            for (( i = 0; i < index_count; i++))
            do
                [[ -z ${tags[${image_index[$i]}]} ]] && tags[${image_index[$i]}]=1 \
                    && is_index_local "${image_index[$i]}" && update=1
            done
            ;;
        untag)
            input_prompt="Untag #"
            ! get_image_index && return 1
            for (( i = 0; i < index_count; i++))
            do
                [[ -n ${tags[${image_index[$i]}]} ]] && unset tags["${image_index[$i]}"] \
                    && is_index_local "${image_index[$i]}" && update=1
            done
            ;;
    esac
    [[ "$update" -eq 1 ]] && return 0 || return 1
}

change_sort() {
    input_prompt="New sort (options: "
    for opt in name time size extension
    do
        [[ "$sort_by" == "$opt" ]] && input_prompt+="*"
        input_prompt+="$opt, "
    done
    input_prompt="${input_prompt:0: -2}):"
    input_autocomplete="sort"
    ! get_input && return 1
    if [[ ! "$input" =~ ^(name|time|size|extension)$ ]]
    then
        set_error "sort" "$input"
        update_status
        return 1
    fi
    local new_sort_by="$input"
    [[ ! "$new_sort_by" == "$sort_by" ]] && sort_by="$new_sort_by" && return 0
    return 1
}

toggle_sort_reverse() {
    [[ "$sort_reverse" -eq 1 ]] && sort_reverse=0 || sort_reverse=1
}

reverse_images(){
    min=0
    (( max = ${#images[@]} -1 ))
    local temp
    while [[ min -lt max ]]
    do
        temp="${image_names[$min]}"
        image_names[$min]="${image_names[$max]}"
        image_names[$max]="$temp"

        temp="${images[$min]}"
        images[$min]="${images[$max]}"
        images[$max]="$temp"

        (( min += 1 ))
        (( max -= 1 ))
    done
}

toggle_names() {
    [[ "$show_names" -eq 1 ]] && show_names=0 || show_names=1
}

change_scaler() {
    input_prompt="New scaler (options: "
    for opt in crop distort fit_contain contain forced_cover cover
    do
        [[ "$scaler" == "$opt" ]] && input_prompt+="*"
        input_prompt+="$opt, "
    done
    input_prompt="${input_prompt:0: -2}):"
    input_autocomplete="scaler"
    ! get_input && return 1
    if [[ ! "$input" =~ ^(crop|distort|fit_contain|contain|forced_cover|cover)$ ]]
    then
        set_error "scaler" "$input"
        update_status
        return 1
    fi
    local new_scaler="$input"
    [[ ! "$new_scaler" == "$scaler" ]] && scaler="$new_scaler" && return 0
    return 1
}

toggle_exec_prompt() {
    [[ "$exec_prompt" -eq 1 ]] && exec_prompt=0 || exec_prompt=1
    [[ "$exec_prompt" -eq 1 ]] && success="Confirm command execution" \
        || warning="Don't confirm command execution"
    update_status --force
}

######################################################################
# Populate the image_names and images arrays by reading the files
# written by the background process
# Uses:
#   tmp_dir
# Modifies:
#   image_names
#   images
#   done_reading
#   total
######################################################################
populate_arrays() {
    # This is to read only new files in each iteration. Should scale well
    [[ ! -f "${tmp_dir}/image_names.txt" ]] || [[ ! -f "${tmp_dir}/images.txt" ]] && return
    mv "${tmp_dir}/image_names.txt" "${tmp_dir}/image_names.txt.old"
    mv "${tmp_dir}/images.txt" "${tmp_dir}/images.txt.old"
    mapfile -t temp_names < "${tmp_dir}/image_names.txt.old"
    mapfile -t temp < "${tmp_dir}/images.txt.old"
    image_names+=("${temp_names[@]}")
    images+=("${temp[@]}")
    [[ -f "${tmp_dir}/done_reading" ]] && done_reading=1 || done_reading=0
    total="${#images[@]}"
}

######################################################################
# Loop waiting for user input to execute actions
# Uses:
#   fit_vertical
#   fit_horizontal
#   prefix
# Modifies:
#   new_start
#   new_fit_vertical
#   new_fit_horizontal
#   prefix
######################################################################
read_key() {
    while true
    do
        [[ "$total" -eq 0 ]] && stop_daemon
        read -rsN1 -t 0.01 char
        read -rsN1 -t 0.0001 k1
        read -rsN1 -t 0.0001 k2
        read -rsN1 -t 0.0001 k3
        read -rsN1 -t 0.0001 k4
        read -rsN1 -t 0.0001 k5
        read -rsN1 -t 0.0001 k6
        key="${char}${k1}${k2}${k3}${k4}${k5}${k6}"
        if [[ -n "$key" ]] && [[ -n "${use_script[$key]}" ]]
        then
            clear_status
            entry="${use_script[$key]}"
            script=${entry%%*([[:space:]]);*}
            input_prompt="${entry##*;*([[:space:]])} #"
            run_use_script
            prefix=
            update_status
            continue
        fi
        if [[ -n "$key" ]] && [[ -n "${edit_script[$key]}" ]]
        then
            clear_status
            entry="${edit_script[$key]}"
            script=${entry%%*([[:space:]]);*}
            input_prompt="${entry##*;*([[:space:]])} #"
            run_edit_script
            prefix=
            update_status
            continue
        fi
        case $key in
            q)
                stop_daemon
                ;;
            n|N|p|P|$'\e[C'|$'\e[D'|$'\e[1;2C'|$'\e[1;2D')
                [[ "$prefix" =~ ^(;|\*+)$ ]] && prefix=
                case $key in
                    n|$'\e[C')
                        keyword=next
                        ;;
                    N|$'\e[1;2C')
                        keyword=last
                        ;;
                    p|$'\e[D')
                        keyword=prev
                        ;;
                    P|$'\e[1;2D')
                        keyword=first
                        ;;
                esac
                old_fit_vertical="$fit_vertical"
                old_fit_horizontal="$fit_horizontal"
                new_fit_vertical="$fit_vertical"
                new_fit_horizontal="$fit_horizontal"
                compute_batch "$keyword" && maybe_redraw
                prefix=
                update_status
                ;;
            s)
                [[ "$prefix" =~ ^(;|\*+)$ ]] && prefix=
                clear_status
                if [[ -z "$prefix" ]]
                then
                    give_dimensions
                else
                    IFS=" " read -r -a prefix_args <<< "$prefix"
                    (( new_fit_vertical = prefix_args[0] ))
                    (( new_fit_horizontal = prefix_args[1] ))
                fi
                new_start="$start"
                maybe_redraw
                prefix=
                update_status
                ;;
            +|=)
                [[ "$prefix" =~ ^(;|\*+)$ ]] && prefix=
                if [[ -z "$prefix" ]]
                then
                    (( new_fit_vertical = fit_vertical + 1 ))
                    (( new_fit_horizontal = fit_horizontal + 1 ))
                else
                    IFS=" " read -r -a prefix_args <<< "$prefix"
                    (( new_fit_vertical = fit_vertical + prefix_args[0] ))
                    (( new_fit_horizontal = fit_horizontal + prefix_args[0] ))
                fi
                new_start="$start"
                maybe_redraw
                prefix=
                update_status
                ;;
            -)
                [[ "$prefix" =~ ^(;|\*+)$ ]] && prefix=
                if [[ -z "$prefix" ]]
                then
                    (( new_fit_vertical = fit_vertical - 1 ))
                    (( new_fit_horizontal = fit_horizontal - 1 ))
                else
                    IFS=" " read -r -a prefix_args <<< "$prefix"
                    (( new_fit_vertical = fit_vertical - prefix_args[0] ))
                    (( new_fit_horizontal = fit_horizontal - prefix_args[0] ))
                fi
                new_start="$start"
                maybe_redraw
                prefix=
                update_status
                ;;
            m)
                clear_status
                [[ "$prefix" =~ ^(;|\*+)$ ]] && prefix=
                goto_image
                prefix=
                update_status
                ;;
            $'\b'|$'\x7F')
                if [[ -n "$prefix" ]]
                then
                    prefix=${prefix:0:-1}
                elif [[ "$batch" -eq 1 ]]
                then
                    old_fit_vertical="$fit_vertical"
                    old_fit_horizontal="$fit_horizontal"
                    fit_vertical="$wide_vertical"
                    fit_horizontal="$wide_horizontal"
                    start="$wide_start"
                    redraw
                    prefix=
                fi
                update_status
                ;;
            k)
                [[ "$prefix" =~ ^(;|\*+)$ ]] && prefix=
                if [[ -z "$prefix" ]]
                then
                    (( new_fit_vertical = fit_vertical + 1 ))
                else
                    IFS=" " read -r -a prefix_args <<< "$prefix"
                    (( new_fit_vertical = fit_vertical + prefix_args[0] ))
                fi
                (( new_fit_horizontal = fit_horizontal ))
                new_start="$start"
                maybe_redraw
                prefix=
                update_status
                ;;
            j)
                [[ "$prefix" =~ ^(;|\*+)$ ]] && prefix=
                if [[ -z "$prefix" ]]
                then
                    (( new_fit_vertical = fit_vertical - 1 ))
                else
                    IFS=" " read -r -a prefix_args <<< "$prefix"
                    (( new_fit_vertical = fit_vertical - prefix_args[0] ))
                fi
                (( new_fit_horizontal = fit_horizontal ))
                new_start="$start"
                maybe_redraw
                prefix=
                update_status
                ;;
            l)
                [[ "$prefix" =~ ^(;|\*+)$ ]] && prefix=
                if [[ -z "$prefix" ]]
                then
                    (( new_fit_horizontal = fit_horizontal + 1 ))
                else
                    IFS=" " read -r -a prefix_args <<< "$prefix"
                    (( new_fit_horizontal = fit_horizontal + prefix_args[0] ))
                fi
                (( new_fit_vertical = fit_vertical ))
                new_start="$start"
                maybe_redraw
                prefix=
                update_status
                ;;
            h)
                [[ "$prefix" =~ ^(;|\*+)$ ]] && prefix=
                if [[ -z "$prefix" ]]
                then
                    (( new_fit_horizontal = fit_horizontal - 1 ))
                else
                    IFS=" " read -r -a prefix_args <<< "$prefix"
                    (( new_fit_horizontal = fit_horizontal - prefix_args[0] ))
                fi
                (( new_fit_vertical = fit_vertical ))
                new_start="$start"
                maybe_redraw
                prefix=
                update_status
                ;;
            r|R)
                clear_status
                if ! command -v convert &> /dev/null
                then
                    error="imagemagick not installed: required for rotation of images"
                    update_status
                    continue
                fi
                case $key in
                    r)
                        script="convert -rotate 90"
                        input_prompt="Rotate clockwise #"
                        run_edit_script
                        ;;
                    R)
                        degrees="-90"
                        script="convert -rotate -90"
                        input_prompt="Rotate counter-clockwise #"
                        run_edit_script
                        ;;
                esac
                prefix=
                update_status
                ;;
            x|b)
                clear_status
                case $key in
                    x|X)
                        action="split"
                        ;;
                    b|B)
                        action="bundle"
                        ;;
                esac
                execute "$action"
                prefix=
                update_status
                ;;
            c)
                clear_status
                rename && update_names
                prefix=
                update_status
                ;;
            d)
                clear_status
                delete_image && redraw
                prefix=
                update_status
                ;;
            u|t)
                case $key in
                    t)
                        action=tag
                        ;;
                    u)
                        action=untag
                        ;;
                esac
                tag_image "$action" && update_names
                prefix=
                update_status
                ;;
            [0-9]|" ")
                prefix+="$key"
                mode=normal
                update_status
                ;;
            "*")
                if [[ "$prefix" =~ ^\*+$ ]]
                then
                    prefix="**"
                else
                    prefix="*"
                fi
                mode=normal
                update_status
                ;;
            ";")
                prefix=
                [[ "${#tags}" -gt 0 ]] && mode=tag || warning="No tagged images"
                update_status
                ;;
            o)
                clear_status
                change_sort && break
                prefix=
                update_status
                ;;
            O)
                toggle_sort_reverse
                if [[ "$done_reading" -eq 1 ]]
                then
                    reverse_images
                    start=0
                    redraw
                else # we have not read all images so we need to go from the start
                    break
                fi
                prefix=
                update_status
                ;;
            F)
                toggle_names && redraw
                prefix=
                update_status
                ;;
            S)
                clear_status
                change_scaler && redraw
                prefix=
                update_status
                ;;
            E)
                toggle_exec_prompt
                prefix=
                ;;
            $'\e'|$'\n')
                prefix=
                mode=normal
                update_status
                ;;
            w)
                clear_status
                save_edits
                prefix=
                update_status
                ;;
            *)
                ;;
        esac
        if [[ ! "$done_reading" -eq 1 ]]
        then
            populate_arrays
            update_status
        fi
    done
}

init() {
    calculate_dimensions
    show_batch
    clear_screen
    update_status
    update_names
    read_key
}

check_dependencies
parse_config
set_defaults
[[ ! -d "$tmp_dir" ]] && mkdir -p "$tmp_dir"
[[ ! -d "$cache_dir" ]] && mkdir -p "$cache_dir"
[[ ! -d "$trash_dir" ]] && mkdir -p "$trash_dir"
[[ ! -d "${cache_dir}/hash/images" ]] && mkdir -p "${cache_dir}/hash/images"
[[ ! -d "${cache_dir}/hash/videos" ]] && mkdir -p "${cache_dir}/hash/videos"
[[ ! -d "${cache_dir}/hash/other" ]] && mkdir -p "${cache_dir}/hash/other"
[[ ! -d "${cache_dir}/thumbnails" ]] && mkdir -p "${cache_dir}/thumbnails"
[[ "$1" =~ ^-h$|^--help$ ]] && help && exit
trap "stop_daemon" EXIT #handles stty echo better than SIGINT
trap "redraw; update_status" SIGWINCH
start_daemon
while true
do
    read_filenames "$@"
    stty -echo
    unset start #make sure that start is not set, makes check in read_images
    (( first_batch = fit_vertical * fit_horizontal ))
    read_target="$first_batch" && read_images
    populate_arrays
    if [[ "$total" -eq 1 ]]
    then
        fit_vertical=1
        fit_horizontal=1
        old_fit_vertical=1
        old_fit_horizontal=1
        wide_vertical=1
        wide_horizontal=1
    fi
    unset read_target && read_images --remaining &
    background_pid="$!"
    [[ "$total" -eq 0 ]] && echo "No images to show" && stty echo && exit_clear=0 && exit
    start=0
    declare -A assoc
    mode=normal
    init
done
